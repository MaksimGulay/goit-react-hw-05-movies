{"version":3,"file":"static/js/134.015d6c6d.chunk.js","mappings":"+SAEaA,EAAU,CACrBC,OAAQ,MACRC,IAAK,kDACLC,OAAQ,CAAEC,SAAU,SACpBC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAIOC,EAAyB,SAAAC,GACpC,MAAO,CACLR,OAAQ,MACRC,IAAI,sCAAD,OAAwCO,GAC3CN,OAAQ,CAAEC,SAAU,SACpBC,QAAS,CACPC,OAAQ,mBACRC,cACE,8NAGP,EAEYG,EAAS,mCAAG,WAAMC,GAAN,gGAEEC,EAAAA,EAAAA,IACrB,4CACA,CACET,OAAQ,CACNU,eAAe,EACfT,SAAU,QACVO,MAAOA,GAETN,QAAS,CACPC,OAAQ,mBACRC,cACE,gOAba,cAEfO,EAFe,yBAiBdA,EAASC,KAAKC,SAjBA,sCAmBrBC,QAAQC,MAAM,yBAAd,MAnBqB,8DAAH,sDAwBTC,EAAU,SAAAV,GACrB,MAAO,CACLR,OAAQ,MACRC,IAAI,sCAAD,OAAwCO,EAAxC,YACHN,OAAQ,CAAEC,SAAU,QAASgB,KAAM,KACnCf,QAAS,CACPC,OAAQ,mBACRC,cACE,8NAGP,EAEYc,EAAa,SAAAZ,GACxB,MAAO,CACLR,OAAQ,MACRC,IAAI,sCAAD,OAAwCO,EAAxC,YACHN,OAAQ,CAAEC,SAAU,QAASgB,KAAM,KACnCf,QAAS,CACPC,OAAQ,mBACRC,cACE,8NAGP,C,wGCGD,UAzEe,WACb,OAA4Be,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOX,EAAP,KAAcgB,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAcF,EAAaG,IAAI,UAErCC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,wFACbH,EADa,wBAEfL,GAAW,GAFI,mBAIUhB,EAAAA,EAAAA,IAAUqB,GAJpB,OAIPI,EAJO,OAKbX,EAAUW,GACVT,GAAW,GANE,kDAQbA,GAAW,GACXT,QAAQC,MAAM,yBAAd,MATa,0DAAH,qDAahBgB,GACD,GAAE,CAACH,IAEJ,IAAMK,EAAY,mCAAG,WAAMC,GAAN,iEACnBA,EAAEC,iBACFR,EAAgB,CAAEnB,MAAOA,IAFN,2CAAH,sDAShB,OACE,4BACA,kBAAM4B,SAAUH,EAAhB,WACE,kBACEI,KAAK,OACLC,MAAO9B,EACP+B,KAAK,cACLC,SAXoB,SAAAC,GACxBjB,EAASiB,EAAMC,OAAOJ,MACvB,EAUKK,YAAY,sBAEd,mBAAQN,KAAK,SAAb,uBAEDf,GACC,yCAEA,wBACGF,EAAOwB,KAAI,SAAAC,GAAK,OACf,0BACGA,EAAMC,aACL,gBACAC,IAAG,yCAAoCF,EAAMC,aAC7CE,IAAKH,EAAMI,kBAGT,gBACAC,MAAO,CACLC,OAAQ,QACRC,MAAO,QACPC,gBAAiB,gBAIvB,SAAC,KAAD,CAAMC,GAAE,kBAAaT,EAAMU,IAA3B,SAAkCV,EAAMW,UAfjCX,EAAMU,GADA,QAuB1B,C","sources":["api.js","pages/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const options = {\n  method: 'GET',\n  url: 'https://api.themoviedb.org/3/trending/movie/day',\n  params: { language: 'en-US' },\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwODA3ZDJhN2IzNjZjOGRkMjBiM2UxN2IxMDQ5NTAyOSIsInN1YiI6IjY0ZmYzOTczZWZlYTdhMDExYWI3N2E5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.WfuiyWNSMnK0XUfRzXRBAAegiGGslDwG9EegGgPDSdI',\n  },\n};\n\nexport const getMovieDetailsOptions = movieId => {\n  return {\n    method: 'GET',\n    url: `https://api.themoviedb.org/3/movie/${movieId}`,\n    params: { language: 'en-US' },\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwODA3ZDJhN2IzNjZjOGRkMjBiM2UxN2IxMDQ5NTAyOSIsInN1YiI6IjY0ZmYzOTczZWZlYTdhMDExYWI3N2E5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.WfuiyWNSMnK0XUfRzXRBAAegiGGslDwG9EegGgPDSdI',\n    },\n  };\n};\n\nexport const getMovies = async query => {\n  try {\n    const response = await axios.get(\n      'https://api.themoviedb.org/3/search/movie',\n      {\n        params: {\n          include_adult: false,\n          language: 'en-US',\n          query: query,\n        },\n        headers: {\n          accept: 'application/json',\n          Authorization:\n            'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwODA3ZDJhN2IzNjZjOGRkMjBiM2UxN2IxMDQ5NTAyOSIsInN1YiI6IjY0ZmYzOTczZWZlYTdhMDExYWI3N2E5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.WfuiyWNSMnK0XUfRzXRBAAegiGGslDwG9EegGgPDSdI',\n        },\n      }\n    );\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching movies:', error);\n    throw error;\n  }\n};\n\nexport const getCast = movieId => {\n  return {\n    method: 'GET',\n    url: `https://api.themoviedb.org/3/movie/${movieId}/credits`,\n    params: { language: 'en-US', page: '1' },\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwODA3ZDJhN2IzNjZjOGRkMjBiM2UxN2IxMDQ5NTAyOSIsInN1YiI6IjY0ZmYzOTczZWZlYTdhMDExYWI3N2E5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.WfuiyWNSMnK0XUfRzXRBAAegiGGslDwG9EegGgPDSdI',\n    },\n  };\n};\n\nexport const getReviews = movieId => {\n  return {\n    method: 'GET',\n    url: `https://api.themoviedb.org/3/movie/${movieId}/reviews`,\n    params: { language: 'en-US', page: '1' },\n    headers: {\n      accept: 'application/json',\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIwODA3ZDJhN2IzNjZjOGRkMjBiM2UxN2IxMDQ5NTAyOSIsInN1YiI6IjY0ZmYzOTczZWZlYTdhMDExYWI3N2E5OCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.WfuiyWNSMnK0XUfRzXRBAAegiGGslDwG9EegGgPDSdI',\n    },\n  };\n};\n","import React, { useState, useEffect } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\nimport { getMovies } from 'api';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n  \n  useEffect(() => {\n    const fetchMovie = async () => {\n      if (searchQuery) {\n        setLoading(true);\n        try {\n          const resulsts = await getMovies(searchQuery);\n          setMovies(resulsts);\n          setLoading(false);\n        } catch (error) {\n          setLoading(false);\n          console.error('Error fetching movies:', error);\n        }\n      }\n    };\n    fetchMovie()\n  }, [searchQuery]);\n  \n  const handleSubmit = async e => {\n    e.preventDefault();\n    setSearchParams({ query: query});\n  };\n    \n    const handleInputChange = event => {\n      setQuery(event.target.value);\n    };\n    \n    return (\n      <div>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={query}\n          name=\"searchQuery\"\n          onChange={handleInputChange}\n          placeholder=\"Search movies...\"\n          />\n        <button type=\"submit\">Search</button>\n      </form>\n      {loading ? (\n        <div>Loading...</div>\n        ) : (\n        <ul>\n          {movies.map(movie => (\n            <li key={movie.id}>\n              {movie.poster_path ? (\n                <img\n                src={`https://image.tmdb.org/t/p/w200${movie.poster_path}`}\n                alt={movie.original_title}\n                />\n                ) : (\n                  <div\n                  style={{\n                    height: '300px',\n                    width: '200px',\n                    backgroundColor: 'lightgray',\n                  }}\n                  ></div>\n                  )}\n              <Link to={`/movies/${movie.id}`}>{movie.title}</Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\nexport default Movies;"],"names":["options","method","url","params","language","headers","accept","Authorization","getMovieDetailsOptions","movieId","getMovies","query","axios","include_adult","response","data","results","console","error","getCast","page","getReviews","useState","movies","setMovies","loading","setLoading","setQuery","useSearchParams","searchParams","setSearchParams","searchQuery","get","useEffect","fetchMovie","resulsts","handleSubmit","e","preventDefault","onSubmit","type","value","name","onChange","event","target","placeholder","map","movie","poster_path","src","alt","original_title","style","height","width","backgroundColor","to","id","title"],"sourceRoot":""}